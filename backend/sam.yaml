AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Exported by architect/package@7.2.0 on 2022-01-18T23:58:28.260Z
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ArcGlobalPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: arn:aws:logs:*:*:*
      - PolicyName: ArcStaticBucketPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:DeleteObject
            Resource:
            - Fn::Sub:
              - arn:aws:s3:::${bukkit}
              - bukkit:
                  Ref: StaticBucket
            - Fn::Sub:
              - arn:aws:s3:::${bukkit}/*
              - bukkit:
                  Ref: StaticBucket
      - PolicyName: ArcDynamoPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:DescribeStream
            - dynamodb:ListStreams
            Resource:
            - Fn::Sub:
              - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}
              - tablename:
                  Ref: CoreTable
            - Fn::Sub:
              - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/*
              - tablename:
                  Ref: CoreTable
            - Fn::Sub:
              - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/stream/*
              - tablename:
                  Ref: CoreTable
  CoreParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub:
        - /${AWS::StackName}/tables/${tablename}
        - tablename: core
      Value:
        Ref: CoreTable
  StaticBucketParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub:
        - /${AWS::StackName}/static/${key}
        - key: bucket
      Value:
        Ref: StaticBucket
  StaticFingerprintParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub:
        - /${AWS::StackName}/static/${key}
        - key: fingerprint
      Value: 'false'
  ParameterStorePolicy:
    Type: AWS::IAM::Policy
    DependsOn: Role
    Properties:
      PolicyName: ArcParameterStorePolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: ssm:GetParametersByPath
          Resource:
            Fn::Sub:
            - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}
            - {}
      Roles:
      - Ref: Role
  HTTP:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: $default
      DefinitionBody:
        openapi: 3.0.1
        info:
          title:
            Ref: AWS::StackName
        paths:
          /api/projects:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetApiProjectsHTTPLambda.Arn}/invocations
                connectionType: INTERNET
            post:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostApiProjectsHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /auth/state:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAuthStateHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /{proxy+}:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCatchallHTTPLambda.Arn}/invocations
                connectionType: INTERNET
            options:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OptionsCatchallHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /auth/login:
            post:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostAuthLoginHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /auth/logout:
            post:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostAuthLogoutHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /_static/{proxy+}:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '1.0'
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub:
                  - http://${bukkit}.s3.${AWS::Region}.amazonaws.com/{proxy}
                  - bukkit:
                      Ref: StaticBucket
                connectionType: INTERNET
                timeoutInMillis: 30000
  GetApiProjectsHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://backend-cfn-deployments-4f34d/6d3536d12078cb26bbd6b7ed1a721fff
      Runtime: nodejs14.x
      Architectures:
      - x86_64
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: backend
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_ENV: production
          ARC_ROLE:
            Ref: Role
          NODE_ENV: production
          SESSION_TABLE_NAME: jwe
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetApiProjectsHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /api/projects
            Method: GET
            ApiId:
              Ref: HTTP
  GetAuthStateHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://backend-cfn-deployments-4f34d/db94760cd77aa2512731df9e9bb8810c
      Runtime: nodejs14.x
      Architectures:
      - x86_64
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: backend
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_ENV: production
          ARC_ROLE:
            Ref: Role
          NODE_ENV: production
          SESSION_TABLE_NAME: jwe
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetAuthStateHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /auth/state
            Method: GET
            ApiId:
              Ref: HTTP
  GetCatchallHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://backend-cfn-deployments-4f34d/d9ccb2635456f00735d6598468a238c7
      Runtime: nodejs14.x
      Architectures:
      - x86_64
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: backend
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_ENV: production
          ARC_ROLE:
            Ref: Role
          NODE_ENV: production
          SESSION_TABLE_NAME: jwe
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetCatchallHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /{proxy+}
            Method: GET
            ApiId:
              Ref: HTTP
  PostApiProjectsHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://backend-cfn-deployments-4f34d/1efec0b967b47e310e9883c11f8bed4d
      Runtime: nodejs14.x
      Architectures:
      - x86_64
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: backend
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_ENV: production
          ARC_ROLE:
            Ref: Role
          NODE_ENV: production
          SESSION_TABLE_NAME: jwe
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        PostApiProjectsHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /api/projects
            Method: POST
            ApiId:
              Ref: HTTP
  PostAuthLoginHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://backend-cfn-deployments-4f34d/fbb2d17a534959c752f987c653ce7abe
      Runtime: nodejs14.x
      Architectures:
      - x86_64
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: backend
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_ENV: production
          ARC_ROLE:
            Ref: Role
          NODE_ENV: production
          SESSION_TABLE_NAME: jwe
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        PostAuthLoginHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /auth/login
            Method: POST
            ApiId:
              Ref: HTTP
  PostAuthLogoutHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://backend-cfn-deployments-4f34d/650d72e7c2f69ff6fd4c5b34dbbbc5e2
      Runtime: nodejs14.x
      Architectures:
      - x86_64
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: backend
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_ENV: production
          ARC_ROLE:
            Ref: Role
          NODE_ENV: production
          SESSION_TABLE_NAME: jwe
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        PostAuthLogoutHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /auth/logout
            Method: POST
            ApiId:
              Ref: HTTP
  OptionsCatchallHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://backend-cfn-deployments-4f34d/328631c636b61bb379aa52dc004824e3
      Runtime: nodejs14.x
      Architectures:
      - x86_64
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: backend
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_ENV: production
          ARC_ROLE:
            Ref: Role
          NODE_ENV: production
          SESSION_TABLE_NAME: jwe
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        OptionsCatchallHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /{proxy+}
            Method: OPTIONS
            ApiId:
              Ref: HTTP
  CoreTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
      - AttributeName: pk
        KeyType: HASH
      AttributeDefinitions:
      - AttributeName: pk
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
  StaticBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
Outputs:
  API:
    Description: API Gateway (HTTP)
    Value:
      Fn::Sub:
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com
      - ApiId:
          Ref: HTTP
  ApiId:
    Description: API ID (ApiId)
    Value:
      Ref: HTTP
  BucketURL:
    Description: Bucket URL
    Value:
      Fn::Sub:
      - http://${bukkit}.s3-website.${AWS::Region}.amazonaws.com
      - bukkit:
          Ref: StaticBucket
